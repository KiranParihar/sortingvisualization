{"ast":null,"code":"var _jsxFileName = \"D:\\\\sa\\\\sort-visualizer\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css'; // import './AppDark.css';\n\nimport AppControls from './components/molecules/AppControls';\nimport TopBar from './components/organisms/TopBar';\nimport AppDrawer from './components/organisms/AppDrawer';\nimport SortVisualizer from './components/organisms/SortVisualizer';\nimport Footer from './components/molecules/Footer';\nimport BubbleSort, { BubbleSortKey, BubbleSortDesc } from './algorithms/BubbleSort';\nimport SelectionSort, { SelectionSortKey, SelectionSortDesc } from './algorithms/SelectionSort';\nimport InsertionSort, { InsertionSortKey, InsertionSortDesc } from './algorithms/InsertionSort';\nimport MergeSort, { MergeSortKey, MergeSortDesc } from './algorithms/MergeSort';\nimport QuickSort, { QuickSortKey, QuickSortDesc } from './algorithms/QuickSort';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      array: [],\n      arraySize: 10,\n      trace: [],\n      algorithm: null,\n      appDrawerOpen: false\n    };\n    this.ALGORITHM = {\n      'Bubble Sort': BubbleSort,\n      'Selection Sort': SelectionSort,\n      'Insertion Sort': InsertionSort,\n      'Merge Sort': MergeSort,\n      'Quick Sort': QuickSort\n    };\n    this.ALGORITHM_KEY = {\n      'Bubble Sort': BubbleSortKey,\n      'Selection Sort': SelectionSortKey,\n      'Insertion Sort': InsertionSortKey,\n      'Merge Sort': MergeSortKey,\n      'Quick Sort': QuickSortKey\n    };\n    this.ALGORITHM_DESC = {\n      'Bubble Sort': BubbleSortDesc,\n      'Selection Sort': SelectionSortDesc,\n      'Insertion Sort': InsertionSortDesc,\n      'Merge Sort': MergeSortDesc,\n      'Quick Sort': QuickSortDesc\n    };\n\n    this.generateRandomArray = () => {\n      // Generate pseudo-random number between 1 and max\n      function getRandomInt(max) {\n        return Math.floor(Math.random() * Math.floor(max)) + 1;\n      } // Generate an array of length max\n\n\n      const array = Array(this.state.arraySize).fill(0).map(() => getRandomInt(this.state.arraySize * 5));\n      this.setState({\n        array,\n        trace: []\n      }, this.createTrace);\n    };\n\n    this.handleAlgorithmChange = algorithm => {\n      this.setState({\n        algorithm\n      }, this.generateRandomArray);\n    };\n\n    this.handleArraySizeChange = size => {\n      size = Number(size);\n      size = size > 100 ? 100 : size;\n      size = size < 0 ? 0 : size;\n      this.setState({\n        arraySize: size\n      }, this.generateRandomArray);\n    };\n\n    this.createTrace = () => {\n      const numbers = [...this.state.array];\n      const sort = this.ALGORITHM[this.state.algorithm];\n\n      if (sort) {\n        const trace = sort(numbers);\n        this.setState({\n          trace\n        });\n      }\n    };\n\n    this.toggleAppDrawer = () => {\n      this.setState(prevState => ({\n        appDrawerOpen: !prevState.appDrawerOpen\n      }));\n    };\n  }\n\n  componentDidMount() {\n    this.generateRandomArray();\n  }\n\n  render() {\n    let theme = `App`; // if (this.state.darkMode) theme += ` App_dark`;\n\n    if (this.state.appDrawerOpen) theme += ` App_modal_open`;\n    const colorKey = this.ALGORITHM_KEY[this.state.algorithm];\n    const desc = this.ALGORITHM_DESC[this.state.algorithm];\n    const controls = /*#__PURE__*/React.createElement(AppControls, {\n      onGenerateRandomArray: this.generateRandomArray,\n      algorithm: this.state.algorithm,\n      onAlgorithmChange: this.handleAlgorithmChange,\n      arraySize: this.state.arraySize,\n      onArraySizeChange: this.handleArraySizeChange,\n      onToggleDarkMode: this.toggleDarkMode,\n      darkMode: this.state.darkMode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: theme,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(TopBar, {\n      drawerOpen: this.state.appDrawerOpen,\n      toggleDrawer: this.toggleAppDrawer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }\n    }, controls), /*#__PURE__*/React.createElement(AppDrawer, {\n      open: this.state.appDrawerOpen,\n      closeDrawer: this.toggleAppDrawer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }\n    }, controls), /*#__PURE__*/React.createElement(\"main\", {\n      className: \"App__Body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(SortVisualizer, {\n      array: this.state.array,\n      trace: this.state.trace,\n      colorKey: colorKey,\n      desc: desc,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/sa/sort-visualizer/src/App.js"],"names":["React","Component","AppControls","TopBar","AppDrawer","SortVisualizer","Footer","BubbleSort","BubbleSortKey","BubbleSortDesc","SelectionSort","SelectionSortKey","SelectionSortDesc","InsertionSort","InsertionSortKey","InsertionSortDesc","MergeSort","MergeSortKey","MergeSortDesc","QuickSort","QuickSortKey","QuickSortDesc","App","state","array","arraySize","trace","algorithm","appDrawerOpen","ALGORITHM","ALGORITHM_KEY","ALGORITHM_DESC","generateRandomArray","getRandomInt","max","Math","floor","random","Array","fill","map","setState","createTrace","handleAlgorithmChange","handleArraySizeChange","size","Number","numbers","sort","toggleAppDrawer","prevState","componentDidMount","render","theme","colorKey","desc","controls","toggleDarkMode","darkMode"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\n// import './AppDark.css';\r\n\r\nimport AppControls from './components/molecules/AppControls';\r\nimport TopBar from './components/organisms/TopBar';\r\nimport AppDrawer from './components/organisms/AppDrawer';\r\nimport SortVisualizer from './components/organisms/SortVisualizer';\r\nimport Footer from './components/molecules/Footer';\r\n\r\nimport BubbleSort, {\r\n  BubbleSortKey,\r\n  BubbleSortDesc\r\n} from './algorithms/BubbleSort';\r\nimport SelectionSort, {\r\n  SelectionSortKey,\r\n  SelectionSortDesc\r\n} from './algorithms/SelectionSort';\r\nimport InsertionSort, {\r\n  InsertionSortKey,\r\n  InsertionSortDesc\r\n} from './algorithms/InsertionSort';\r\nimport MergeSort, {\r\n  MergeSortKey,\r\n  MergeSortDesc\r\n} from './algorithms/MergeSort';\r\nimport QuickSort, {\r\n  QuickSortKey,\r\n  QuickSortDesc\r\n} from './algorithms/QuickSort';\r\n\r\n\r\nclass App extends Component {\r\n  state = {\r\n    array: [],\r\n    arraySize: 10,\r\n    trace: [],\r\n    algorithm: null,\r\n    appDrawerOpen: false\r\n  };\r\n\r\n  ALGORITHM = {\r\n    'Bubble Sort': BubbleSort,\r\n    'Selection Sort': SelectionSort,\r\n    'Insertion Sort': InsertionSort,\r\n    'Merge Sort': MergeSort,\r\n    'Quick Sort': QuickSort,\r\n    \r\n  };\r\n\r\n  ALGORITHM_KEY = {\r\n    'Bubble Sort': BubbleSortKey,\r\n    'Selection Sort': SelectionSortKey,\r\n    'Insertion Sort': InsertionSortKey,\r\n    'Merge Sort': MergeSortKey,\r\n    'Quick Sort': QuickSortKey,\r\n    \r\n  };\r\n\r\n  ALGORITHM_DESC = {\r\n    'Bubble Sort': BubbleSortDesc,\r\n    'Selection Sort': SelectionSortDesc,\r\n    'Insertion Sort': InsertionSortDesc,\r\n    'Merge Sort': MergeSortDesc,\r\n    'Quick Sort': QuickSortDesc,\r\n   \r\n  };\r\n\r\n  componentDidMount() {\r\n    this.generateRandomArray();\r\n  }\r\n\r\n  generateRandomArray = () => {\r\n    // Generate pseudo-random number between 1 and max\r\n    function getRandomInt(max) {\r\n      return Math.floor(Math.random() * Math.floor(max)) + 1;\r\n    }\r\n\r\n    // Generate an array of length max\r\n    const array = Array(this.state.arraySize)\r\n      .fill(0)\r\n      .map(() => getRandomInt(this.state.arraySize * 5));\r\n\r\n    this.setState(\r\n      {\r\n        array,\r\n        trace: []\r\n      },\r\n      this.createTrace\r\n    );\r\n  };\r\n\r\n  handleAlgorithmChange = (algorithm) => {\r\n    this.setState({ algorithm }, this.generateRandomArray);\r\n  };\r\n\r\n  handleArraySizeChange = (size) => {\r\n    size = Number(size);\r\n    size = size > 100 ? 100 : size;\r\n    size = size < 0 ? 0 : size;\r\n    this.setState({ arraySize: size }, this.generateRandomArray);\r\n  };\r\n\r\n  createTrace = () => {\r\n    const numbers = [...this.state.array];\r\n    const sort = this.ALGORITHM[this.state.algorithm];\r\n    if (sort) {\r\n      const trace = sort(numbers);\r\n      this.setState({ trace });\r\n    }\r\n  };\r\n\r\n  // toggleDarkMode = () => {\r\n  //   this.setState((prevState) => ({ darkMode: !prevState.darkMode }));\r\n  // };\r\n\r\n  toggleAppDrawer = () => {\r\n    this.setState((prevState) => ({\r\n      appDrawerOpen: !prevState.appDrawerOpen\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    let theme = `App`;\r\n    // if (this.state.darkMode) theme += ` App_dark`;\r\n    if (this.state.appDrawerOpen) theme += ` App_modal_open`;\r\n\r\n    const colorKey = this.ALGORITHM_KEY[this.state.algorithm];\r\n    const desc = this.ALGORITHM_DESC[this.state.algorithm];\r\n\r\n    const controls = (\r\n      <AppControls\r\n        onGenerateRandomArray={this.generateRandomArray}\r\n        algorithm={this.state.algorithm}\r\n        onAlgorithmChange={this.handleAlgorithmChange}\r\n        arraySize={this.state.arraySize}\r\n        onArraySizeChange={this.handleArraySizeChange}\r\n        onToggleDarkMode={this.toggleDarkMode}\r\n        darkMode={this.state.darkMode}\r\n      />\r\n    );\r\n\r\n    return (\r\n      <div className={theme}>\r\n        <TopBar\r\n          drawerOpen={this.state.appDrawerOpen}\r\n          toggleDrawer={this.toggleAppDrawer}\r\n        >\r\n          {controls}\r\n        </TopBar>\r\n\r\n        <AppDrawer\r\n          open={this.state.appDrawerOpen}\r\n          closeDrawer={this.toggleAppDrawer}\r\n        >\r\n          {controls}\r\n        </AppDrawer>\r\n\r\n        <main className=\"App__Body\">\r\n          <SortVisualizer\r\n            array={this.state.array}\r\n            trace={this.state.trace}\r\n            colorKey={colorKey}\r\n            desc={desc}\r\n          />\r\n        </main>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}